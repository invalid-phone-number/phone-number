{"workflow_execution_timeout":300,"workflow_module_execution_timeout":300,"return_workflow_module_instance_ids":[],"modules":[{"name":"Input","workflow_module_instance_id":"input","module_id":"system-input-1","description":null,"properties":{},"connections":[],"module_options":{"enable_error_handling":false},"error_handling_strategy":null},{"name":"POST Trigger","workflow_module_instance_id":"post_trigger","module_id":"system-webhook_trigger-1","description":null,"properties":{"body":{"data":[],"allow_extra_fields":true},"method":"POST","headers":{"data":[],"allow_extra_fields":true},"api_keys":[],"request_type":"async","default_response":"","query_parameters":{"data":[],"allow_extra_fields":true}},"connections":[],"module_options":{"enable_error_handling":false},"error_handling_strategy":null},{"name":"prompt","workflow_module_instance_id":"prompt","module_id":"llm-prompt_llm-1","description":null,"properties":{"prompt":"        WITH\n\n        ----------------------------------------------------------------------\n\n        -- 1) Convert Attio fields and keep team array (with robust\n        normalization)\n\n        ----------------------------------------------------------------------\n\n        attio_mapped AS (\n          SELECT\n            record_id,\n\n            -- Domains: strip protocol, 'www', then remove punctuation, fold to uppercase\n            UPPER(\n              REGEXP_REPLACE(\n                REGEXP_REPLACE(\n                  TRIM(\n                    COALESCE(\n                      REGEXP_REPLACE(\n                        LOWER(array_to_string(domains, ',')),\n                        '^https?:\\\\/\\\\/(www\\\\.)?|^www\\\\.',\n                        ''\n                      ),\n                      ''\n                    )\n                  ),\n                  '[^[:alnum:][:space:]]',\n                  '',\n                  'g'\n                ),\n                '\\s+',\n                ' ',\n                'g'\n              )\n            ) AS domains_str,\n\n            UPPER(\n              REGEXP_REPLACE(\n                REGEXP_REPLACE(\n                  TRIM(COALESCE(array_to_string(company_type, ','), '')),\n                  '[^[:alnum:][:space:]]',\n                  '',\n                  'g'\n                ),\n                '\\s+',\n                ' ',\n                'g'\n              )\n            ) AS company_type_str,\n\n            UPPER(\n              REGEXP_REPLACE(\n                REGEXP_REPLACE(\n                  TRIM(COALESCE(array_to_string(o_priority, ','), '')),\n                  '[^[:alnum:][:space:]]',\n                  '',\n                  'g'\n                ),\n                '\\s+',\n                ' ',\n                'g'\n              )\n            ) AS o_priority_str,\n\n            UPPER(\n              REGEXP_REPLACE(\n                REGEXP_REPLACE(\n                  TRIM(COALESCE(array_to_string(o_deal_size, ','), '')),\n                  '[^[:alnum:][:space:]]',\n                  '',\n                  'g'\n                ),\n                '\\s+',\n                ' ',\n                'g'\n              )\n            ) AS o_deal_size_str,\n\n            UPPER(\n              REGEXP_REPLACE(\n                REGEXP_REPLACE(\n                  TRIM(COALESCE(array_to_string(o_category, ','), '')),\n                  '[^[:alnum:][:space:]]',\n                  '',\n                  'g'\n                ),\n                '\\s+',\n                ' ',\n                'g'\n              )\n            ) AS o_category_str,\n\n            UPPER(\n              REGEXP_REPLACE(\n                REGEXP_REPLACE(\n                  TRIM(COALESCE(array_to_string(o_stage, ','), '')),\n                  '[^[:alnum:][:space:]]',\n                  '',\n                  'g'\n                ),\n                '\\s+',\n                ' ',\n                'g'\n              )\n            ) AS o_stage_str,\n\n            UPPER(\n              REGEXP_REPLACE(\n                REGEXP_REPLACE(\n                  TRIM(COALESCE(array_to_string(o_deck, ','), '')),\n                  '[^[:alnum:][:space:]]',\n                  '',\n                  'g'\n                ),\n                '\\s+',\n                ' ',\n                'g'\n              )\n            ) AS o_deck_str,\n\n            UPPER(\n              REGEXP_REPLACE(\n                REGEXP_REPLACE(\n                  TRIM(COALESCE(array_to_string(o_interest, ','), '')),\n                  '[^[:alnum:][:space:]]',\n                  '',\n                  'g'\n                ),\n                '\\s+',\n                ' ',\n                'g'\n              )\n            ) AS o_interest_str,\n\n            -- Single-value columns\n            UPPER(\n              REGEXP_REPLACE(\n                REGEXP_REPLACE(\n                  TRIM(COALESCE(name, '')),\n                  '[^[:alnum:][:space:]]',\n                  '',\n                  'g'\n                ),\n                '\\s+',\n                ' ',\n                'g'\n              )\n            ) AS name,\n\n            UPPER(\n              REGEXP_REPLACE(\n                REGEXP_REPLACE(\n                  TRIM(COALESCE(o_notes, '')),\n                  '[^[:alnum:][:space:]]',\n                  '',\n                  'g'\n                ),\n                '\\s+',\n                ' ',\n                'g'\n              )\n            ) AS o_notes,\n\n            UPPER(\n              REGEXP_REPLACE(\n                REGEXP_REPLACE(\n                  TRIM(COALESCE(o_deck_link, '')),\n                  '[^[:alnum:][:space:]]',\n                  '',\n                  'g'\n                ),\n                '\\s+',\n                ' ',\n                'g'\n              )\n            ) AS o_deck_link,\n\n            UPPER(\n              REGEXP_REPLACE(\n                REGEXP_REPLACE(\n                  TRIM(COALESCE(description, '')),\n                  '[^[:alnum:][:space:]]',\n                  '',\n                  'g'\n                ),\n                '\\s+',\n                ' ',\n                'g'\n              )\n            ) AS description,\n\n            -- Boolean fields\n            discuss,\n            prioritization_discuss_checkbox,\n\n            -- Team array (normalize each element in the comparison CTE)\n            sf_kv_team,\n\n            -- Diligence Lead (Attio array -> string)\n            UPPER(\n              REGEXP_REPLACE(\n                REGEXP_REPLACE(\n                  TRIM(\n                    COALESCE(\n                      array_to_string(diligence_lead, ','),\n                      ''\n                    )\n                  ),\n                  '[^[:alnum:][:space:]]',\n                  '',\n                  'g'\n                ),\n                '\\s+',\n                ' ',\n                'g'\n              )\n            ) AS diligence_lead_str\n          FROM attio_accounts_prod\n        ),\n\n        ----------------------------------------------------------------------\n\n        -- 2) Filter Salesforce to \"OPPORTUNITY\" + robust normalization\n\n        --    (attio_id__c is our new key)\n\n        ----------------------------------------------------------------------\n\n        salesforce_mapped AS (\n          SELECT\n            attio_id__c AS attio_id,\n\n            UPPER(\n              REGEXP_REPLACE(\n                REGEXP_REPLACE(\n                  TRIM(\n                    COALESCE(\n                      REGEXP_REPLACE(\n                        LOWER(website),\n                        '^https?:\\\\/\\\\/(www\\\\.)?|^www\\\\.',\n                        ''\n                      ),\n                      ''\n                    )\n                  ),\n                  '[^[:alnum:][:space:]]',\n                  '',\n                  'g'\n                ),\n                '\\s+',\n                ' ',\n                'g'\n              )\n            ) AS website,\n\n            UPPER(\n              REGEXP_REPLACE(\n                REGEXP_REPLACE(\n                  TRIM(COALESCE(type, '')),\n                  '[^[:alnum:][:space:]]',\n                  '',\n                  'g'\n                ),\n                '\\s+',\n                ' ',\n                'g'\n              )\n            ) AS type,\n\n            UPPER(\n              REGEXP_REPLACE(\n                REGEXP_REPLACE(\n                  TRIM(COALESCE(opriority__c, '')),\n                  '[^[:alnum:][:space:]]',\n                  '',\n                  'g'\n                ),\n                '\\s+',\n                ' ',\n                'g'\n              )\n            ) AS opriority__c,\n\n            UPPER(\n              REGEXP_REPLACE(\n                REGEXP_REPLACE(\n                  TRIM(COALESCE(deal_size__c, '')),\n                  '[^[:alnum:][:space:]]',\n                  '',\n                  'g'\n                ),\n                '\\s+',\n                ' ',\n                'g'\n              )\n            ) AS deal_size__c,\n\n            UPPER(\n              REGEXP_REPLACE(\n                REGEXP_REPLACE(\n                  TRIM(COALESCE(ocategory__c, '')),\n                  '[^[:alnum:][:space:]]',\n                  '',\n                  'g'\n                ),\n                '\\s+',\n                ' ',\n                'g'\n              )\n            ) AS ocategory__c,\n\n            UPPER(\n              REGEXP_REPLACE(\n                REGEXP_REPLACE(\n                  TRIM(COALESCE(opportunity_stage__c, '')),\n                  '[^[:alnum:][:space:]]',\n                  '',\n                  'g'\n                ),\n                '\\s+',\n                ' ',\n                'g'\n              )\n            ) AS opportunity_stage__c,\n\n            UPPER(\n              REGEXP_REPLACE(\n                REGEXP_REPLACE(\n                  TRIM(COALESCE(deck__c, '')),\n                  '[^[:alnum:][:space:]]',\n                  '',\n                  'g'\n                ),\n                '\\s+',\n                ' ',\n                'g'\n              )\n            ) AS deck__c,\n\n            UPPER(\n              REGEXP_REPLACE(\n                REGEXP_REPLACE(\n                  TRIM(COALESCE(interest_level__c, '')),\n                  '[^[:alnum:][:space:]]',\n                  '',\n                  'g'\n                ),\n                '\\s+',\n                ' ',\n                'g'\n              )\n            ) AS interest_level__c,\n\n            UPPER(\n              REGEXP_REPLACE(\n                REGEXP_REPLACE(\n                  TRIM(COALESCE(name, '')),\n                  '[^[:alnum:][:space:]]',\n                  '',\n                  'g'\n                ),\n                '\\s+',\n                ' ',\n                'g'\n              )\n            ) AS name,\n\n            UPPER(\n              REGEXP_REPLACE(\n                REGEXP_REPLACE(\n                  TRIM(COALESCE(notes__c, '')),\n                  '[^[:alnum:][:space:]]',\n                  '',\n                  'g'\n                ),\n                '\\s+',\n                ' ',\n                'g'\n              )\n            ) AS notes__c,\n\n            UPPER(\n              REGEXP_REPLACE(\n                REGEXP_REPLACE(\n                  TRIM(COALESCE(deck_link__c, '')),\n                  '[^[:alnum:][:space:]]',\n                  '',\n                  'g'\n                ),\n                '\\s+',\n                ' ',\n                'g'\n              )\n            ) AS deck_link__c,\n\n            UPPER(\n              REGEXP_REPLACE(\n                REGEXP_REPLACE(\n                  TRIM(COALESCE(description, '')),\n                  '[^[:alnum:][:space:]]',\n                  '',\n                  'g'\n                ),\n                '\\s+',\n                ' ',\n                'g'\n              )\n            ) AS description,\n\n            discuss__c,\n            prioritization_discuss__c,\n            team__c,\n\n            -- Diligence Lead in Salesforce is a single string, no transformation needed beyond normalizing if we want\n            UPPER(\n              REGEXP_REPLACE(\n                REGEXP_REPLACE(\n                  TRIM(COALESCE(diligence_lead__c, '')),\n                  '[^[:alnum:][:space:]]',\n                  '',\n                  'g'\n                ),\n                '\\s+',\n                ' ',\n                'g'\n              )\n            ) AS diligence_lead__c\n          FROM salesforce_accounts_prod\n          WHERE UPPER(TRIM(type)) = 'OPPORTUNITY'\n        ),\n\n        ----------------------------------------------------------------------\n\n        -- 3) Compare common account fields\n\n        ----------------------------------------------------------------------\n\n        account_comparison AS (\n          SELECT\n            COALESCE(s.attio_id, a.record_id) AS attio_id,\n\n            s.website,\n            a.domains_str,\n            (s.website = a.domains_str) AS website_vs_domains_match,\n\n            s.type,\n            a.company_type_str,\n            (s.type = a.company_type_str) AS type_vs_company_type_match,\n\n            s.opriority__c,\n            a.o_priority_str,\n            (s.opriority__c = a.o_priority_str) AS o_priority_match,\n\n            s.deal_size__c,\n            a.o_deal_size_str,\n            (s.deal_size__c = a.o_deal_size_str) AS deal_size_match,\n\n            s.ocategory__c,\n            a.o_category_str,\n            (s.ocategory__c = a.o_category_str) AS o_category_match,\n\n            s.opportunity_stage__c,\n            a.o_stage_str,\n            (s.opportunity_stage__c = a.o_stage_str) AS o_stage_match,\n\n            ----------------------------------------------------------------\n            -- SPECIAL CASE for DECK\n            ----------------------------------------------------------------\n            s.deck__c,\n            a.o_deck_str,\n            CASE\n              WHEN s.deck__c IN ('DECKLINKONLY','DECK LINK ONLY')\n                THEN (a.o_deck_str IN ('DECKLINK','DECK LINK'))\n              ELSE (s.deck__c = a.o_deck_str)\n            END AS deck_match,\n\n            s.interest_level__c,\n            a.o_interest_str,\n            (s.interest_level__c = a.o_interest_str) AS interest_level_match,\n\n            s.name AS salesforce_name,\n            a.name AS attio_name,\n            (s.name = a.name) AS name_match,\n\n            s.notes__c,\n            a.o_notes,\n            (s.notes__c = a.o_notes) AS notes_match,\n\n            s.deck_link__c,\n            a.o_deck_link,\n            (s.deck_link__c = a.o_deck_link) AS deck_link_match,\n\n            s.description AS salesforce_description,\n            a.description AS attio_description,\n            (s.description = a.description) AS description_match,\n\n            s.discuss__c,\n            a.discuss,\n            (s.discuss__c = a.discuss) AS discuss_match,\n\n            s.prioritization_discuss__c,\n            a.prioritization_discuss_checkbox,\n            (s.prioritization_discuss__c = a.prioritization_discuss_checkbox) AS prioritization_discuss_match\n          FROM salesforce_mapped s\n          FULL OUTER JOIN attio_mapped a\n            ON s.attio_id = a.record_id\n        ),\n\n        ----------------------------------------------------------------------\n\n        -- 4) Compare Sponsor fields (robust normalization)\n\n        ----------------------------------------------------------------------\n\n        sponsor_mapped AS (\n          SELECT\n            t1.attio_id__c AS attio_id,\n            t2.attio_user_id AS attio_user_id_str\n          FROM salesforce_accounts_prod t1\n          LEFT JOIN team_user_mapping t2\n            ON t1.sponsor__c = t2.sf_team_id\n        ),\n\n        sponsors_attio AS (\n          SELECT\n            record_id AS attio_id,\n            UPPER(\n              REGEXP_REPLACE(\n                REGEXP_REPLACE(\n                  TRIM(COALESCE(array_to_string(o_sponsor, ','), '')),\n                  '[^[:alnum:][:space:]]',\n                  '',\n                  'g'\n                ),\n                '\\s+',\n                ' ',\n                'g'\n              )\n            ) AS o_sponsor_str\n          FROM attio_accounts_prod\n        ),\n\n        sponsor_comparison AS (\n          SELECT\n            COALESCE(sm.attio_id, sa.attio_id) AS attio_id,\n            sm.attio_user_id_str,\n            sa.o_sponsor_str,\n            (\n              UPPER(\n                REGEXP_REPLACE(\n                  REGEXP_REPLACE(\n                    TRIM(COALESCE(sm.attio_user_id_str, '')),\n                    '[^[:alnum:][:space:]]',\n                    '',\n                    'g'\n                  ),\n                  '\\s+',\n                  ' ',\n                  'g'\n                )\n              )\n              =\n              UPPER(\n                REGEXP_REPLACE(\n                  REGEXP_REPLACE(\n                    TRIM(COALESCE(sa.o_sponsor_str, '')),\n                    '[^[:alnum:][:space:]]',\n                    '',\n                    'g'\n                  ),\n                  '\\s+',\n                  ' ',\n                  'g'\n                )\n              )\n            ) AS sponsor_arrays_match\n          FROM sponsor_mapped sm\n          FULL OUTER JOIN sponsors_attio sa\n            ON sm.attio_id = sa.attio_id\n        ),\n\n        ----------------------------------------------------------------------\n\n        -- 5) Compare Team arrays\n\n        ----------------------------------------------------------------------\n\n        team_comparison AS (\n          SELECT\n            COALESCE(s.attio_id, a.record_id) AS attio_id,\n\n            -- Salesforce Team array\n            COALESCE(\n              ARRAY(\n                SELECT\n                  UPPER(\n                    REGEXP_REPLACE(\n                      REGEXP_REPLACE(\n                        TRIM(COALESCE(elem, '')),\n                        '[^[:alnum:][:space:]]',\n                        '',\n                        'g'\n                      ),\n                      '\\s+',\n                      ' ',\n                      'g'\n                    )\n                  )\n                FROM unnest(string_to_array(s.team__c, ';')) AS elem\n                ORDER BY\n                  UPPER(\n                    REGEXP_REPLACE(\n                      REGEXP_REPLACE(\n                        TRIM(COALESCE(elem, '')),\n                        '[^[:alnum:][:space:]]',\n                        '',\n                        'g'\n                      ),\n                      '\\s+',\n                      ' ',\n                      'g'\n                    )\n                  )\n              )::TEXT[],\n              '{}'::TEXT[]\n            ) AS salesforce_team_sorted,\n\n            -- Attio Team array\n            COALESCE(\n              ARRAY(\n                SELECT\n                  UPPER(\n                    REGEXP_REPLACE(\n                      REGEXP_REPLACE(\n                        TRIM(COALESCE(elem, '')),\n                        '[^[:alnum:][:space:]]',\n                        '',\n                        'g'\n                      ),\n                      '\\s+',\n                      ' ',\n                      'g'\n                    )\n                  )\n                FROM unnest(a.sf_kv_team) AS elem\n                ORDER BY\n                  UPPER(\n                    REGEXP_REPLACE(\n                      REGEXP_REPLACE(\n                        TRIM(COALESCE(elem, '')),\n                        '[^[:alnum:][:space:]]',\n                        '',\n                        'g'\n                      ),\n                      '\\s+',\n                      ' ',\n                      'g'\n                    )\n                  )\n              )::TEXT[],\n              '{}'::TEXT[]\n            ) AS attio_team_sorted,\n\n            (\n              COALESCE(\n                ARRAY(\n                  SELECT\n                    UPPER(\n                      REGEXP_REPLACE(\n                        REGEXP_REPLACE(\n                          TRIM(COALESCE(elem, '')),\n                          '[^[:alnum:][:space:]]',\n                          '',\n                          'g'\n                        ),\n                        '\\s+',\n                        ' ',\n                        'g'\n                      )\n                    )\n                  FROM unnest(string_to_array(s.team__c, ';')) AS elem\n                  ORDER BY\n                    UPPER(\n                      REGEXP_REPLACE(\n                        REGEXP_REPLACE(\n                          TRIM(COALESCE(elem, '')),\n                          '[^[:alnum:][:space:]]',\n                          '',\n                          'g'\n                        ),\n                        '\\s+',\n                        ' ',\n                        'g'\n                      )\n                    )\n                )::TEXT[],\n                '{}'::TEXT[]\n              )\n              =\n              COALESCE(\n                ARRAY(\n                  SELECT\n                    UPPER(\n                      REGEXP_REPLACE(\n                        REGEXP_REPLACE(\n                          TRIM(COALESCE(elem, '')),\n                          '[^[:alnum:][:space:]]',\n                          '',\n                          'g'\n                        ),\n                        '\\s+',\n                        ' ',\n                        'g'\n                      )\n                    )\n                  FROM unnest(a.sf_kv_team) AS elem\n                  ORDER BY\n                    UPPER(\n                      REGEXP_REPLACE(\n                        REGEXP_REPLACE(\n                          TRIM(COALESCE(elem, '')),\n                          '[^[:alnum:][:space:]]',\n                          '',\n                          'g'\n                        ),\n                        '\\s+',\n                        ' ',\n                        'g'\n                      )\n                    )\n                )::TEXT[],\n                '{}'::TEXT[]\n              )\n            ) AS team_arrays_match\n          FROM salesforce_mapped s\n          FULL OUTER JOIN attio_mapped a\n            ON s.attio_id = a.record_id\n        ),\n\n        ----------------------------------------------------------------------\n\n        -- 6) Compare Diligence Lead\n\n        ----------------------------------------------------------------------\n\n        diligence_comparison AS (\n          SELECT\n            COALESCE(s.attio_id, a.record_id) AS attio_id,\n\n            s.diligence_lead__c AS sf_diligence_lead,\n            a.diligence_lead_str AS attio_diligence_lead,\n\n            (\n              s.diligence_lead__c = a.diligence_lead_str\n            ) AS diligence_lead_match\n          FROM salesforce_mapped s\n          FULL OUTER JOIN attio_mapped a\n            ON s.attio_id = a.record_id\n        ),\n\n        ----------------------------------------------------------------------\n\n        -- 7) Merge everything\n\n        ----------------------------------------------------------------------\n\n        merged AS (\n          SELECT\n            ac.attio_id,\n\n            ac.website,\n            ac.domains_str,\n            ac.website_vs_domains_match,\n\n            ac.type,\n            ac.company_type_str,\n            ac.type_vs_company_type_match,\n\n            ac.opriority__c,\n            ac.o_priority_str,\n            ac.o_priority_match,\n\n            ac.deal_size__c,\n            ac.o_deal_size_str,\n            ac.deal_size_match,\n\n            ac.ocategory__c,\n            ac.o_category_str,\n            ac.o_category_match,\n\n            ac.opportunity_stage__c,\n            ac.o_stage_str,\n            ac.o_stage_match,\n\n            ac.deck__c,\n            ac.o_deck_str,\n            ac.deck_match,\n\n            ac.interest_level__c,\n            ac.o_interest_str,\n            ac.interest_level_match,\n\n            ac.salesforce_name,\n            ac.attio_name,\n            ac.name_match,\n\n            ac.notes__c,\n            ac.o_notes,\n            ac.notes_match,\n\n            ac.deck_link__c,\n            ac.o_deck_link,\n            ac.deck_link_match,\n\n            ac.salesforce_description,\n            ac.attio_description,\n            ac.description_match,\n\n            ac.discuss__c,\n            ac.discuss,\n            ac.discuss_match,\n\n            ac.prioritization_discuss__c,\n            ac.prioritization_discuss_checkbox,\n            ac.prioritization_discuss_match,\n\n            sc.attio_user_id_str,\n            sc.o_sponsor_str,\n            sc.sponsor_arrays_match,\n\n            tc.salesforce_team_sorted,\n            tc.attio_team_sorted,\n            tc.team_arrays_match,\n\n            dc.sf_diligence_lead,\n            dc.attio_diligence_lead,\n            dc.diligence_lead_match\n          FROM account_comparison ac\n          FULL OUTER JOIN sponsor_comparison sc\n            ON ac.attio_id = sc.attio_id\n          FULL OUTER JOIN team_comparison tc\n            ON ac.attio_id = tc.attio_id\n          FULL OUTER JOIN diligence_comparison dc\n            ON ac.attio_id = dc.attio_id\n        )\n\n        ----------------------------------------------------------------------\n\n        -- 8) Final SELECT: Show only mismatches\n\n        ----------------------------------------------------------------------\n\n        SELECT\n          s.*\n        FROM merged m\n\n        JOIN salesforce_accounts_prod s\n          ON s.attio_id__c = m.attio_id\n        WHERE NOT (\n            COALESCE(m.type_vs_company_type_match,       TRUE)\n            AND COALESCE(m.o_priority_match,             TRUE)\n            AND COALESCE(m.deal_size_match,              TRUE)\n            AND COALESCE(m.o_category_match,             TRUE)\n            AND COALESCE(m.o_stage_match,                TRUE)\n            AND COALESCE(m.deck_match,                   TRUE)\n            AND COALESCE(m.interest_level_match,         TRUE)\n            AND COALESCE(m.name_match,                   TRUE)\n            AND COALESCE(m.notes_match,                  TRUE)\n            AND COALESCE(m.deck_link_match,              TRUE)\n            AND COALESCE(m.description_match,            TRUE)\n            AND COALESCE(m.discuss_match,                TRUE)\n            AND COALESCE(m.prioritization_discuss_match, TRUE)\n            AND COALESCE(m.sponsor_arrays_match,         TRUE)\n            AND COALESCE(m.team_arrays_match,            TRUE)\n            AND COALESCE(m.diligence_lead_match,         TRUE)\n        );","llm-model":"llama_3_8b"},"connections":[],"module_options":{"enable_error_handling":false},"error_handling_strategy":null},{"name":"test list","workflow_module_instance_id":"test_list","module_id":"airtable-list_records-1","description":null,"properties":{"base":{"id":"appIjvvdlXFATkA5C","label":"New Base"},"sort":"[\n    { \"field\": \"field_id1\", \"direction\": \"asc\" }, \n    { \"field\": \"field_id2\", \"direction\": \"desc\" }\n]","table":{"id":"tblgqhKm8nOpcrtK8","label":"Table 1"},"fields":"[\n    \"field_id1\",\n    \"field_id2\"\n]","page_size":100,"max_records":1000,"additional_fields":"{\n    \"view\": \"grid view\" ,\n    \"cellFormat\": \"markdown\" \n}"},"connections":[{"connection_name":"Airtable","connection_app_type":"airtable","connection_management_type":"managed"}],"module_options":{"enable_error_handling":false},"error_handling_strategy":null},{"name":"hyr","workflow_module_instance_id":"hyr","module_id":"hyperline-list_records-1","description":null,"properties":{"page":1,"filters":[],"per_page":20,"connection":{"connection_name":"Hyprline","connection_app_type":"hyperline","connection_management_type":"managed"},"is_sandbox":false,"object_type":"subscriptions"},"connections":[],"module_options":{"enable_error_handling":false},"error_handling_strategy":null}],"edges":[{"source":{"handle_id":null,"workflow_module_instance_id":"post_trigger"},"target":{"handle_id":null,"workflow_module_instance_id":"input"},"edge_id":"input-post_trigger"},{"source":{"handle_id":null,"workflow_module_instance_id":"input"},"target":{"handle_id":null,"workflow_module_instance_id":"prompt"},"edge_id":"input-153bb818-0019-4449-bae4-4e156370158a"},{"source":{"handle_id":null,"workflow_module_instance_id":"prompt"},"target":{"handle_id":null,"workflow_module_instance_id":"test_list"},"edge_id":"edge_prompt-test_list-output-input"},{"source":{"handle_id":null,"workflow_module_instance_id":"test_list"},"target":{"handle_id":null,"workflow_module_instance_id":"hyr"},"edge_id":"test_list-5e8b4b63-5dfe-470a-a2c3-90c0f3e2585b"}]}